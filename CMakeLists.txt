PROJECT (Viewer)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

if(UNIX)
  ADD_DEFINITIONS(--std=c++0x)
endif()

#NANOGui
# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
# Add the configurations from nanogui
add_subdirectory(ext/nanogui)
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/include")
# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects bin2c nanogui PROPERTY FOLDER "dependencies")
# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})
# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})

#femlib
add_subdirectory(femlib)
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/femlib/include")

INCLUDE_DIRECTORIES(include)
FILE(GLOB EXE_SRC "src/*.cpp" "src/*.c")

ADD_EXECUTABLE(Viewer ${EXE_SRC})
message("extra incs \n ${NANOGUI_EXTRA_INCS}")
message(${NANOGUI_EXTRA_LIBS})
# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(Viewer nanogui ${NANOGUI_EXTRA_LIBS} femlib)
