PROJECT (Viewer LANGUAGES CXX CUDA)
CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

if(UNIX)
  ADD_DEFINITIONS(--std=c++0x)
endif()

# NANOGui
# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
# Add the configurations from nanogui
add_subdirectory(../ext/nanogui nanogui)
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../ext/nanogui/include")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../ext/cuda_samples")
# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects bin2c nanogui PROPERTY FOLDER "dependencies")
# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})
# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})

# Request that particles be built with -std=c++11
# As this is a public compile feature anything that links to particles
# will also build with -std=c++11

#femlib
add_subdirectory(../femlib femlib)
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../femlib/include")

INCLUDE_DIRECTORIES(include)
FILE(GLOB EXE_SRC "src/*.cpp" "src/*.c" )

add_library(VolRenderCuda STATIC 
  vol-render/volume_rendering_kernel.cu
  vol-render/volume_renderer.cpp
  )
target_compile_features(VolRenderCuda PUBLIC cxx_std_11)

ADD_EXECUTABLE(Viewer ${EXE_SRC})
target_compile_features(Viewer PUBLIC cxx_std_11)

# We need to explicitly state that we need all CUDA files in the particle
# library to be built with -dc as the member functions could be called by
# other libraries and executables
set_target_properties( Viewer
                       PROPERTIES CUDA_SEPARABLE_COMPILATION ON
                      )

message("extra incs \n ${NANOGUI_EXTRA_INCS}")
message(${NANOGUI_EXTRA_LIBS})
# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(Viewer VolRenderCuda nanogui ${NANOGUI_EXTRA_LIBS} femlib)
